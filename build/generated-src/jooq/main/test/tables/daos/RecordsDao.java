/*
 * This file is generated by jOOQ.
 */
package test.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import test.tables.Records;
import test.tables.records.RecordsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordsDao extends DAOImpl<RecordsRecord, test.tables.pojos.Records, Long> {

    /**
     * Create a new RecordsDao without any configuration
     */
    public RecordsDao() {
        super(Records.RECORDS, test.tables.pojos.Records.class);
    }

    /**
     * Create a new RecordsDao with an attached configuration
     */
    public RecordsDao(Configuration configuration) {
        super(Records.RECORDS, test.tables.pojos.Records.class, configuration);
    }

    @Override
    public Long getId(test.tables.pojos.Records object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.Records> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Records.RECORDS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<test.tables.pojos.Records> fetchById(Long... values) {
        return fetch(Records.RECORDS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public test.tables.pojos.Records fetchOneById(Long value) {
        return fetchOne(Records.RECORDS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.Records> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Records.RECORDS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<test.tables.pojos.Records> fetchByName(String... values) {
        return fetch(Records.RECORDS.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public test.tables.pojos.Records fetchOneByName(String value) {
        return fetchOne(Records.RECORDS.NAME, value);
    }

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.Records> fetchRangeOfData(String lowerInclusive, String upperInclusive) {
        return fetchRange(Records.RECORDS.DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<test.tables.pojos.Records> fetchByData(String... values) {
        return fetch(Records.RECORDS.DATA, values);
    }

    /**
     * Fetch records that have <code>innerRecordId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.Records> fetchRangeOfInnerrecordid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Records.RECORDS.INNERRECORDID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>innerRecordId IN (values)</code>
     */
    public List<test.tables.pojos.Records> fetchByInnerrecordid(Long... values) {
        return fetch(Records.RECORDS.INNERRECORDID, values);
    }
}
