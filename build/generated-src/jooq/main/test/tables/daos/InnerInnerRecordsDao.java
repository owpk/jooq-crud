/*
 * This file is generated by jOOQ.
 */
package test.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import test.tables.InnerInnerRecords;
import test.tables.records.InnerInnerRecordsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnerInnerRecordsDao extends DAOImpl<InnerInnerRecordsRecord, test.tables.pojos.InnerInnerRecords, Long> {

    /**
     * Create a new InnerInnerRecordsDao without any configuration
     */
    public InnerInnerRecordsDao() {
        super(InnerInnerRecords.INNER_INNER_RECORDS, test.tables.pojos.InnerInnerRecords.class);
    }

    /**
     * Create a new InnerInnerRecordsDao with an attached configuration
     */
    public InnerInnerRecordsDao(Configuration configuration) {
        super(InnerInnerRecords.INNER_INNER_RECORDS, test.tables.pojos.InnerInnerRecords.class, configuration);
    }

    @Override
    public Long getId(test.tables.pojos.InnerInnerRecords object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.InnerInnerRecords> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InnerInnerRecords.INNER_INNER_RECORDS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<test.tables.pojos.InnerInnerRecords> fetchById(Long... values) {
        return fetch(InnerInnerRecords.INNER_INNER_RECORDS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public test.tables.pojos.InnerInnerRecords fetchOneById(Long value) {
        return fetchOne(InnerInnerRecords.INNER_INNER_RECORDS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<test.tables.pojos.InnerInnerRecords> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(InnerInnerRecords.INNER_INNER_RECORDS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<test.tables.pojos.InnerInnerRecords> fetchByName(String... values) {
        return fetch(InnerInnerRecords.INNER_INNER_RECORDS.NAME, values);
    }
}
