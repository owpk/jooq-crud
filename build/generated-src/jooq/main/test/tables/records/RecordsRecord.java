/*
 * This file is generated by jOOQ.
 */
package test.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import test.tables.Records;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordsRecord extends UpdatableRecordImpl<RecordsRecord> implements Record4<Long, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.records.id</code>.
     */
    public RecordsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.records.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.records.name</code>.
     */
    public RecordsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.records.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.records.data</code>.
     */
    public RecordsRecord setData(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.records.data</code>.
     */
    public String getData() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.records.innerRecordId</code>.
     */
    public RecordsRecord setInnerrecordid(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.records.innerRecordId</code>.
     */
    public Long getInnerrecordid() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Records.RECORDS.ID;
    }

    @Override
    public Field<String> field2() {
        return Records.RECORDS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Records.RECORDS.DATA;
    }

    @Override
    public Field<Long> field4() {
        return Records.RECORDS.INNERRECORDID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getData();
    }

    @Override
    public Long component4() {
        return getInnerrecordid();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getData();
    }

    @Override
    public Long value4() {
        return getInnerrecordid();
    }

    @Override
    public RecordsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RecordsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public RecordsRecord value3(String value) {
        setData(value);
        return this;
    }

    @Override
    public RecordsRecord value4(Long value) {
        setInnerrecordid(value);
        return this;
    }

    @Override
    public RecordsRecord values(Long value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RecordsRecord
     */
    public RecordsRecord() {
        super(Records.RECORDS);
    }

    /**
     * Create a detached, initialised RecordsRecord
     */
    public RecordsRecord(Long id, String name, String data, Long innerrecordid) {
        super(Records.RECORDS);

        setId(id);
        setName(name);
        setData(data);
        setInnerrecordid(innerrecordid);
    }

    /**
     * Create a detached, initialised RecordsRecord
     */
    public RecordsRecord(test.tables.pojos.Records value) {
        super(Records.RECORDS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setData(value.getData());
            setInnerrecordid(value.getInnerrecordid());
        }
    }
}
