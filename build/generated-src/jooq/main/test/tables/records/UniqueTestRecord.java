/*
 * This file is generated by jOOQ.
 */
package test.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import test.tables.UniqueTest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UniqueTestRecord extends UpdatableRecordImpl<UniqueTestRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.unique_test.id</code>.
     */
    public UniqueTestRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.unique_test.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.unique_test.name</code>.
     */
    public UniqueTestRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.unique_test.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.unique_test.val</code>.
     */
    public UniqueTestRecord setVal(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.unique_test.val</code>.
     */
    public String getVal() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UniqueTest.UNIQUE_TEST.ID;
    }

    @Override
    public Field<String> field2() {
        return UniqueTest.UNIQUE_TEST.NAME;
    }

    @Override
    public Field<String> field3() {
        return UniqueTest.UNIQUE_TEST.VAL;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getVal();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getVal();
    }

    @Override
    public UniqueTestRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UniqueTestRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public UniqueTestRecord value3(String value) {
        setVal(value);
        return this;
    }

    @Override
    public UniqueTestRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UniqueTestRecord
     */
    public UniqueTestRecord() {
        super(UniqueTest.UNIQUE_TEST);
    }

    /**
     * Create a detached, initialised UniqueTestRecord
     */
    public UniqueTestRecord(Long id, String name, String val) {
        super(UniqueTest.UNIQUE_TEST);

        setId(id);
        setName(name);
        setVal(val);
    }

    /**
     * Create a detached, initialised UniqueTestRecord
     */
    public UniqueTestRecord(test.tables.pojos.UniqueTest value) {
        super(UniqueTest.UNIQUE_TEST);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setVal(value.getVal());
        }
    }
}
