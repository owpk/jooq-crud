/*
 * This file is generated by jOOQ.
 */
package test.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.Keys;
import test.Public;
import test.tables.records.InnerInnerRecordsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnerInnerRecords extends TableImpl<InnerInnerRecordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inner_inner_records</code>
     */
    public static final InnerInnerRecords INNER_INNER_RECORDS = new InnerInnerRecords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnerInnerRecordsRecord> getRecordType() {
        return InnerInnerRecordsRecord.class;
    }

    /**
     * The column <code>public.inner_inner_records.id</code>.
     */
    public final TableField<InnerInnerRecordsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.inner_inner_records.name</code>.
     */
    public final TableField<InnerInnerRecordsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private InnerInnerRecords(Name alias, Table<InnerInnerRecordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnerInnerRecords(Name alias, Table<InnerInnerRecordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.inner_inner_records</code> table reference
     */
    public InnerInnerRecords(String alias) {
        this(DSL.name(alias), INNER_INNER_RECORDS);
    }

    /**
     * Create an aliased <code>public.inner_inner_records</code> table reference
     */
    public InnerInnerRecords(Name alias) {
        this(alias, INNER_INNER_RECORDS);
    }

    /**
     * Create a <code>public.inner_inner_records</code> table reference
     */
    public InnerInnerRecords() {
        this(DSL.name("inner_inner_records"), null);
    }

    public <O extends Record> InnerInnerRecords(Table<O> child, ForeignKey<O, InnerInnerRecordsRecord> key) {
        super(child, key, INNER_INNER_RECORDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InnerInnerRecordsRecord, Long> getIdentity() {
        return (Identity<InnerInnerRecordsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InnerInnerRecordsRecord> getPrimaryKey() {
        return Keys.INNER_INNER_RECORDS_PKEY;
    }

    @Override
    public InnerInnerRecords as(String alias) {
        return new InnerInnerRecords(DSL.name(alias), this);
    }

    @Override
    public InnerInnerRecords as(Name alias) {
        return new InnerInnerRecords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnerInnerRecords rename(String name) {
        return new InnerInnerRecords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnerInnerRecords rename(Name name) {
        return new InnerInnerRecords(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
