/*
 * This file is generated by jOOQ.
 */
package test.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.Keys;
import test.Public;
import test.tables.records.UniqueTestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UniqueTest extends TableImpl<UniqueTestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.unique_test</code>
     */
    public static final UniqueTest UNIQUE_TEST = new UniqueTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UniqueTestRecord> getRecordType() {
        return UniqueTestRecord.class;
    }

    /**
     * The column <code>public.unique_test.id</code>.
     */
    public final TableField<UniqueTestRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.unique_test.name</code>.
     */
    public final TableField<UniqueTestRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.unique_test.val</code>.
     */
    public final TableField<UniqueTestRecord, String> VAL = createField(DSL.name("val"), SQLDataType.VARCHAR(255), this, "");

    private UniqueTest(Name alias, Table<UniqueTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private UniqueTest(Name alias, Table<UniqueTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.unique_test</code> table reference
     */
    public UniqueTest(String alias) {
        this(DSL.name(alias), UNIQUE_TEST);
    }

    /**
     * Create an aliased <code>public.unique_test</code> table reference
     */
    public UniqueTest(Name alias) {
        this(alias, UNIQUE_TEST);
    }

    /**
     * Create a <code>public.unique_test</code> table reference
     */
    public UniqueTest() {
        this(DSL.name("unique_test"), null);
    }

    public <O extends Record> UniqueTest(Table<O> child, ForeignKey<O, UniqueTestRecord> key) {
        super(child, key, UNIQUE_TEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UniqueTestRecord, Long> getIdentity() {
        return (Identity<UniqueTestRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UniqueTestRecord> getPrimaryKey() {
        return Keys.UNIQUE_TEST_PKEY;
    }

    @Override
    public List<UniqueKey<UniqueTestRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_TEST_NAME_KEY, Keys.UNIQUE_TEST_VAL_KEY);
    }

    @Override
    public UniqueTest as(String alias) {
        return new UniqueTest(DSL.name(alias), this);
    }

    @Override
    public UniqueTest as(Name alias) {
        return new UniqueTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UniqueTest rename(String name) {
        return new UniqueTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UniqueTest rename(Name name) {
        return new UniqueTest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
