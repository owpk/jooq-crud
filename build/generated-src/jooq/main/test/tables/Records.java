/*
 * This file is generated by jOOQ.
 */
package test.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.Keys;
import test.Public;
import test.tables.records.RecordsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Records extends TableImpl<RecordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.records</code>
     */
    public static final Records RECORDS = new Records();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordsRecord> getRecordType() {
        return RecordsRecord.class;
    }

    /**
     * The column <code>public.records.id</code>.
     */
    public final TableField<RecordsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.records.name</code>.
     */
    public final TableField<RecordsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.records.data</code>.
     */
    public final TableField<RecordsRecord, String> DATA = createField(DSL.name("data"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.records.innerRecordId</code>.
     */
    public final TableField<RecordsRecord, Long> INNERRECORDID = createField(DSL.name("innerRecordId"), SQLDataType.BIGINT, this, "");

    private Records(Name alias, Table<RecordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Records(Name alias, Table<RecordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.records</code> table reference
     */
    public Records(String alias) {
        this(DSL.name(alias), RECORDS);
    }

    /**
     * Create an aliased <code>public.records</code> table reference
     */
    public Records(Name alias) {
        this(alias, RECORDS);
    }

    /**
     * Create a <code>public.records</code> table reference
     */
    public Records() {
        this(DSL.name("records"), null);
    }

    public <O extends Record> Records(Table<O> child, ForeignKey<O, RecordsRecord> key) {
        super(child, key, RECORDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RecordsRecord, Long> getIdentity() {
        return (Identity<RecordsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecordsRecord> getPrimaryKey() {
        return Keys.RECORDS_PKEY;
    }

    @Override
    public List<UniqueKey<RecordsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RECORDS_NAME_KEY);
    }

    @Override
    public List<ForeignKey<RecordsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECORDS__FK_31);
    }

    private transient InnerRecords _innerRecords;

    public InnerRecords innerRecords() {
        if (_innerRecords == null)
            _innerRecords = new InnerRecords(this, Keys.RECORDS__FK_31);

        return _innerRecords;
    }

    @Override
    public Records as(String alias) {
        return new Records(DSL.name(alias), this);
    }

    @Override
    public Records as(Name alias) {
        return new Records(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Records rename(String name) {
        return new Records(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Records rename(Name name) {
        return new Records(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
